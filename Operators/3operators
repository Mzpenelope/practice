in comparison operators: 
0 output is returned when statement is false
1 output is returned when statement is true
you can compare if two variables is equal or not with ==
you can compare if two variables is greater than or less than or 
greater than and equal to or lesser than or equal to with <,>,<=,>=
you can printfs two comparison with one comparison && another comparison
as demonstrated below
int main(void)
{  
    int j = 100 + 50;
    int m = j + 20;
    {
    printf("%d", j > 4 && m < 670 );
    }
    return (0);
}
you can printfs two comparison of the same variable, with first comparison || second comparison
as demonstrated below
int main(void)
{
        int j = 100 + 50;
        int m = j + 20;
        {
                printf("%d", j > 4 || m < 670 );
        }
        return (0);
}

you can negate or reverse the results by using ! the not operator, as demonstrated below
int main(void)
{
        int j = 100 + 50;
        int m = j + 20;
        {
                printf("%d", !(j > 4 || m < 670));
        }
        return (0);
}
you can use check the size or byte of a variable by using sizeof
with the specifier %lu as demonstrated below
int main(void)
{
        int j = 100 + 50;
        int m = j + 20;
        {
                printf("%lu", sizeof(m , j));
        }
        return (0);
}
bool can be used to compare if two condition is true or false 
by employing the header file #include <stdbool.h> as demonstrated below
#include <stdio.h>
#include <stdbool.h>
/*
 *main - Entry point
 *description - practice
 *int main(void) - printfs code
 */
int main(void)
{
        bool j = 100 + 50;
        bool m = j + 20;
        {
                printf("%d", m == j);
        }
        return (0);
}
