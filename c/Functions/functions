
FUNCTIONS
===========
how to create and call my own fuction
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
void Phill(void)
{
        printf("i am determined");
}
int main()
{
        Phill();
        return (0);
}

can call my my own function many times as demonstrated
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
void Phill(void)
{
        printf("i am determined\n");
}
int main()
{
        Phill();
        Phill();
        Phill();
        Phill();
        Phill();
        return (0);
}

how to define and call a function that takes a string parameter
and prints the provided nickname
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
void Phill(char nickname[])
{
        printf("i am %s\n", nickname);
}
int main()
{
        Phill("Sugar");
        Phill("Baby");
        Phill("Darling");
        Phill("Honey");
        Phill("Sweetheart");
        return (0);
}

how to define and call a function that takes a string parameter
and an integer parameter prints the provided qualities and percent
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
void Phill(char qualities[], int amount)
{
        printf("need %s in %d percent\n", qualities, amount);
}
int main()
{
        Phill("Love", 100);
        Phill("Money", 200);
        Phill("Sex", 100);
        Phill("Loyalty", 100);
        Phill("Honesty", 100);
        return (0);
}

how to write a program that defines a function
that takes an array as an argument and prints a message for each element in the 
array using the for loops
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
void Phill(int a[3])
{
        for (int h = 0; h < 3; h++)
        {
                printf("i need %d rounds of sex everyday\n", a[h]);
        }
}
int main()
{
        int a[3] = {3, 5, 7};
        Phill(a);
        return (0);
}

how to write a program declares a function that 
takes an integer argument adds a number to it, and returns the result. 
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 */
int Phill(int a)
{
        return (20 + a);
}
int main()
{
        printf("%d", Phill(9));
        return (0);
}

how to write a program that will calculate the sum 
of 10 and 20 using the Phill function and store the result in the variable m. 
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 */
int Phill(int a, int b)
{
        return (a + b);
}
int main()
{
        int m = Phill(10, 20);
        printf("%d", m);
        return (0);
}

another option on how to write a program that will calculate the sum 
of 10 and 20 using the Phill function and store the result in the variable m. 
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 */
int Phill(int, int);
int main()
{
        int m = Phill(10, 20);
        printf("%d", m);
        return (0);
}

int Phill(int a, int b)
{
        return (a + b);
}

how to write a program that declares a sum function that 
recursively calls itself with decreasing values of a variable
until it reaches 0,  
#include <stdio.h>
/**
 * main - Entry point
 * description - practice
 */
int sum(int a);
int main()
{
        int m = sum(5);
        printf("%d", m);
        return (0);
}

int sum(int a)
{
        if (a > 0)
        {
        return (a + sum(a - 1));
        }
        else
        {
        return (0);
        }
}

how to write a program that calculates the square root of a number
using the sqrt() function and #include <math.h> and %f floating
point specifier to prints the result
#include <stdio.h>
#include <math.h>
/**
 * main - Entry point
 * description - practice
 */
int main()
{
        printf("%f", sqrt(25));
        return (0);
}

how to write a program that runs a decimal number up or down to its nearest 
point using the ceil() and floor() function and the header #include <math.h>
and %f floating specifier and how to calculate a number raise to the power of 
another number using the  pow() function
#include <stdio.h>
#include <math.h>
/**
 * main - Entry point
 * description - practice
 */
int main()
{
        printf("%f\n", ceil(2.5));
        printf("%f\n", floor(2.5));
        printf("%f\n", pow(2, 5));
        return (0);
}
