
IF, ELSE IF, ELSE
=======================
you can use else if, if the if condition is not true
and else if the else if condition is not true as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j = 100 + 50;
       int m = j + 20;
       if (j > m)
       {
               printf("love");
       }
       else if (j == m)
       {
               printf("hate");
       }
       else
       {
               printf("i am the best");
       }
       return (0);
}

another way to use the if, else if, else is by using the ternary
as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j = 100 + 50;
       int m = j + 20;
       (j > m)? printf("love") : printf("i am the best");
       return (0);
}

another way to use the if, else if, else is by using switch as
demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j = 100 + 50;
       int m = j + 20;
       switch (m)
       {
               case 10:
                       printf("you");
                       break;
               case 150:
                       printf("me");
                       break;
               case 170:
                       printf("you and me");
                       break;
        }
        return (0);
}
by using switch, you can use default once condition isnt met
as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j = 100 + 50;
       int m = j + 20;
       switch (m)
       {
               case 10:
                       printf("you");
                       break;
               case 150:
                       printf("me");
                       break;
               default:
                       printf("i love you");
        }
        return (0);
}




WHILE LOOPS
====================
you can use while loops by specifying the number of times
condition can run as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j = 20;
       int m = j + 20;
       while (j < 50)
       {
               printf("%d\n", j);
               j++;
        }
        return (0);
}
dont forget to increase the variable used in the condition (j++), 
otherwise the loop will never end!

you can use break in while loops to break loops as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j = 5;
       int k = 10;

       while (j < 20)
       {
               if (j == 15)
                {
                        break;
                }
                printf("Age: %d\n", j);
                j++;
       }
       while (k <= 20)
       {
               if (k == 16)
               {
                       break;
               }
               printf("Count: %d\n", k);
               k++;
       }
       return (0);
}
you can use continue in the same manner to continue loops,
the number you indicate will not be part when the loops is continuing 
so if you indicated that 
if (j == 20) 
{
    continue;
}
the number 20 will not be part of the continuity



FOR LOOPS
====================
you can use for loops by specifying the number of times
condition can run as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j;
       int m = j + 20;
       for (j = 20; j < 50; j++)
       {
               printf("%d\n", j);
       }
       return (0);
}
dont forget to increase the variable used in the condition (j++), 
otherwise the loop will never end!

you can use for loops to printfs a condition
in twos using j = j + 2 or threes using j = j + 3 as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j;
       int m = j + 20;
       for (j = 20; j <= 50; j = j + 3)
       {
               printf("%d\n", j);
       }
       return (0);
}

you can use for loops to printfs a condition
giving it a specificed name like printf("Age: %d\n", j); as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j, k;

       for (j = 20; j < 50; j++)
       {
               printf("Age: %d\n", j);
       }
       for (k = 10; k <= 50; k++)
       {
               printf("Count: %d\n", k);
       }
       return (0);
}

you can use break in for loops to break loops as demonstrated below
#include <stdio.h>
/*
 * main - Entry point
 * description - practice
 * int main(void) - printfs code
 */
int main(void)
{
       int j, k;

       for (j = 20; j < 50; j++)
       {
               if (j == 35)
                {
                        break;
                }
                printf("Age: %d\n", j);
       }
       for (k = 10; k <= 50; k++)
       {
               if (k == 25)
               {
                       break;
               }
               printf("Count: %d\n", k);
       }
       return (0);
}
you can use continue in the same manner to continue loops,
the number you indicate will not be part when the loops is continuing 
so if you indicated that 
if (j == 20) 
{
    continue;
}
the number 20 will not be part of the continuity
